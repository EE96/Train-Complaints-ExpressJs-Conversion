service: Train-Complaints-Processor-serverless
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-1
  httpApi: 
    cors: 
      allowedOrigins: '*'
      allowedHeaders:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
        - access-token

  iam:
    role:
      statements:
        - Effect: Allow
          Action: dynamodb:GetItem
          Resource: '*'
        - Effect: Allow
          Action: dynamodb:PutItem
          Resource: "*"

functions:
  hello:
    handler: endpoints/handlers.hello
    events:
      - httpApi:
          path: /
          method: get
  makeComplaint:
    handler: endpoints/makeComplaint/lambda.handler
    events:
      - httpApi:
          path: /api/makeComplaint
          method: post
  fetchComplaint:
    handler: endpoints/fetchComplaint/lambda.handler
    events:
      - httpApi:
          path: /api/fetchComplaint/{complaintId}
          method: get
  resolveComplaint:
    handler: endpoints/resolveComplaint/lambda.handler
    events:
      - httpApi:
          path: /api/resolveComplaint/{complaintId}
          method: put

resources:
  Resources:
    Complaints:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Complaints
        AttributeDefinitions:
          - AttributeName: complaintId
            AttributeType: S
        KeySchema:
          - AttributeName: complaintId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  serverless-offline:
    httpPort: 3100

plugins:
  - serverless-plugin-typescript
  - serverless-offline
